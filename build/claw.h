
/* This file was autogenerated by 'ctemp' from  for class bivar2. */


#include <freewpc.h>

typedef enum {
	CLAW_IDLE,
	CLAW_FORWARD,
	CLAW_REVERSE,
} claw_state_t;

typedef enum {
	CLAW_UNKNOWN,
	CLAW_LEFT,
	CLAW_RIGHT,
} claw_location_t;


//this number is equivalent to off time of duty cycle, on time is always 16ms
#define CLAW_DUTY_100 0
#define CLAW_DUTY_50  TIME_16MS
#define CLAW_DUTY_25  TIME_50MS
#define CLAW_DUTY_10  TIME_166MS

extern __fastram__ claw_state_t claw_state;
extern __fastram__ U8 claw_timer;
extern  claw_location_t claw_location;
extern U8 claw_speed;

/* User APIs */
void claw_go_left (void);
void claw_go_right (void);
void claw_set_speed (U8 speed);
void claw_stop (void);
void claw_bump_left (void);
void claw_bump_right (void);
void claw_go_to_center_monitor (void);
void claw_go_left_to_center (void);
void claw_go_right_to_center (void);

 
extern inline void claw_stop_from_interrupt (void) {
	claw_state = CLAW_IDLE;
	sol_disable(SOL_CLAW_LEFT);
	sol_disable(SOL_CLAW_RIGHT);
}


extern inline void claw_set_speed (U8 speed) { claw_speed = speed; }

extern inline U8 claw_get_speed (void) { return claw_speed; }

extern inline claw_state_t claw_get_state (void) { return claw_state; }

extern inline claw_location_t claw_get_location (void) { return claw_location; }

/**
 * Realtime update of a duty-cycled device.
 */
/* RTT(name=claw_service freq=16) */
extern inline void claw_service (void) {
	/* Only act if device is enabled */
	if (claw_state != CLAW_IDLE) {
		if (claw_timer == 0) {
			/* Motor was enabled for 1 tick.  We need to
			turn it off, and restart the off delay. */
			if (claw_speed == 0)
				;
			else if (claw_state == CLAW_FORWARD)
				sol_disable (SOL_CLAW_LEFT);
			else
				sol_disable (SOL_CLAW_RIGHT);
			claw_timer = claw_speed;
		}
		else if (--claw_timer == 0) {
			/* We are in off delay, if timer reaches zero,
			then turn it back on. */
			if (claw_state == CLAW_FORWARD)
				sol_enable (SOL_CLAW_LEFT);
			else
				sol_enable (SOL_CLAW_RIGHT);
		}
	}
}










